#include <SoftwareSerial.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 20, 4); // set the LCD address to 0x27 for a 20x4 display

// Define the RFID reader TX pin connection
#define RFID_TX 2

// Create a SoftwareSerial object to communicate with the RFID reader
SoftwareSerial RFID(RFID_TX, -1); // -1 means only use the TX pin

// Define a database of product prices
const int numProducts = 2;
const String products[numProducts] = {"54006E12A189", "54006E20A0BA"};
const float prices[numProducts] = {10.50, 5.25};

// Define the buzzer pin connection
#define BUZZER_PIN 3

// Define the button pin for removing the most recently added product
#define REMOVE_BUTTON_PIN 4

// Initialize the shopping cart and total price
String cart[10];
int cartCount = 0;
float total = 0;

// Time window (in milliseconds) for removing the most recently added product
const unsigned long REMOVE_TIME_WINDOW = 5000; // 5 seconds

unsigned long lastProductAddedTime = 0;

// Function to play a tone on the buzzer
void playTone() {
  tone(BUZZER_PIN, 1000);
}

// Function to stop playing the tone on the buzzer
void stopTone() {
  noTone(BUZZER_PIN);
}

void setup() {
  // Initialize the serial port
  Serial.begin(9600);

  // Initialize the RFID reader
  RFID.begin(9600);

  // Initialize the crystal display
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(" AUTOMATIC BILL");
  delay(2000);
  lcd.setCursor(0, 1);
  lcd.print("  SHOPPING CART");
  delay(2000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("   WELCOME TO ");
  lcd.setCursor(0, 1);
  lcd.print("      MART");

  // Initialize the buzzer pin
  pinMode(BUZZER_PIN, OUTPUT);

  // Initialize the button pin
  pinMode(REMOVE_BUTTON_PIN, INPUT_PULLUP);
}

void loop() {
  // Check if there is any data available from the RFID reader
  if (RFID.available()) {
    // Read the RFID tag ID
    String tagID = RFID.readStringUntil('\n');

    // Check if the scanned RFID tag is in the database
    for (int i = 0; i < numProducts; i++) {
      if (tagID == products[i]) {
        // Add the product to the cart
        cart[cartCount] = tagID;
        cartCount++;

        // Add the product price to the total
        total += prices[i];

        // Play a tone on the buzzer when an item is added to the cart
        playTone();

        lastProductAddedTime = millis(); // Record the time when the product was added

        // Delay for 1 second
        delay(1000);

        // Stop playing the tone on the buzzer
        stopTone();
      }
    }
  }

  // Check if the customer wants to remove the most recently added product
  if (digitalRead(REMOVE_BUTTON_PIN) == LOW) {
    if (cartCount > 0 && (millis() - lastProductAddedTime < REMOVE_TIME_WINDOW)) {
      total -= getPriceOfLastProduct(); // Decrease the total price
      clearLastProduct();
    }
  }

  // Output the shopping cart and total price to the crystal display
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Cart (");
  lcd.print(cartCount);
  lcd.print(")");

  lcd.setCursor(0, 1);
  lcd.print("Total: $");
  lcd.print(total, 2);

  // Add a 1 second delay
  delay(1000);
}

float getPriceOfLastProduct() {
  for (int i = numProducts - 1; i >= 0; i--) {
    if (cart[cartCount - 1] == products[i]) {
      return prices[i];
    }
  }
  return 0;
}

void clearLastProduct() {
  if (cartCount > 0) {
    cartCount--;
    cart[cartCount] = "";
  }
}
